#ifndef GURU_BYTECODE
#define GURU_BYTECODE
#include "value.h"
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

enum opcode {
    OP_EXIT, OP_FLOAT_NEGATE,
    OP_CONST, OP_CONST_16,
    OP_FLOAT_UN_PLUS, OP_RETURN_EXPRESSION,
    OP_GROUPING_EXPR,
    OP_FLOAT_SUM_2, OP_FLOAT_SUB, OP_FLOAT_MULT_2, OP_FLOAT_DIVIDE,
    OP_BYTES_SUM_2, OP_BYTES_SUB, OP_BYTES_MULT_2, OP_BYTES_DIVIDE,
    OP_LOAD_TRUTH, OP_LOAD_LIES, OP_LOGNOT,
    OP_LOAD_VOID, OP_LOAD_NOTHING,
    OP_EQ, OP_NEQ, OP_GT, OP_GTE, OP_LT, OP_LTE,

    OP_STR_CONC, OP_STRING_EQ,

    OP_OP, OP_OP_NOFREE, OP_DEFINE_GLOBAL, OP_DEFINE_GLOBAL_16, OP_LOAD_GLOBAL, OP_LOAD_GLOBAL_16,
    OP_ASSIGN_GLOBAL, OP_ASSIGN_GLOBAL_16,

    //JUMPS
    OP_JUMP_IF_FALSE, OP_JUMP_IF_TRUE, OP_JUMP, OP_JUMP_BACK,
    OP_JUMP_IF_FALSE_ONSTACK, OP_JUMP_IF_TRUE_ONSTACK,
    //register-based opcodes
    //used to offload a local to the heap
    OP_LOAD_CLOSURE, OP_PUT_CLOSURE,

    OP_LOAD_LINK, OP_PUT_LINK,
    OP_LOAD_8, OP_PUT_8, OP_PUT_8_WITH_POP,
    OP_PUT_8_NOTHING,
    OP_PUT_8_VOID,

    OP_CALL, OP_RETURN, OP_DECLARE_FUNCTION, OP_DECLARE_FUNCTION_16,
    OP_COLLECT_LOCALS,

    OP_DECLARE_CLASS, OP_DECLARE_CLASS_16, OP_DEFINE_CLASSVAR, OP_DEFINE_CLASSVAR_16,

    OP_GET, OP_SET,
    OP_GET_16, OP_SET_16,

    //loads a specific "register" that holds the caller's value for a method
    OP_LOAD_THIS,

    OP_INDEX_GET, OP_INDEX_SET,

    OP_FOR_LOOP, OP_FOR_LOOP_END,

    __LAST_ENUM_VAL,
};

#ifdef DEBUG_MODE
static char *names[__LAST_ENUM_VAL+1] = {[OP_INDEX_GET] = "OP_INDEX_GET", [OP_INDEX_SET] = "OP_INDEX_SET", [OP_EXIT] = "OP_EXIT",[OP_FLOAT_NEGATE] = "OP_FLOAT_NEGATE", [OP_CONST] = "OP_CONST",[OP_CONST_16] = "OP_CONST_16", [OP_FLOAT_UN_PLUS] = "OP_FLOAT_UN_PLUS",[OP_RETURN_EXPRESSION] = "OP_RETURN_EXPRESSION", [OP_GROUPING_EXPR] = "OP_GROUPING_EXPR", [OP_FLOAT_SUM_2] = "OP_FLOAT_SUM_2",[OP_FLOAT_SUB] = "OP_FLOAT_SUB",[OP_FLOAT_MULT_2] = "OP_FLOAT_MULT_2",[OP_FLOAT_DIVIDE] = "OP_FLOAT_DIVIDE", [OP_BYTES_SUM_2] = "OP_BYTES_SUM_2",[OP_BYTES_SUB] = "OP_BYTES_SUB",[OP_BYTES_MULT_2] = "OP_BYTES_MULT_2",[OP_BYTES_DIVIDE] = "OP_BYTES_DIVIDE", [OP_LOAD_TRUTH] = "OP_LOAD_TRUTH",[OP_LOAD_LIES] = "OP_LOAD_LIES",[OP_LOGNOT] = "OP_LOGNOT", [OP_LOAD_VOID] = "OP_LOAD_VOID",[OP_LOAD_NOTHING] = "OP_LOAD_NOTHING", [OP_EQ] = "OP_EQ",[OP_NEQ] = "OP_NEQ",[OP_GT] = "OP_GT",[OP_GTE] = "OP_GTE",[OP_LT] = "OP_LT",[OP_LTE] = "OP_LTE", [OP_STR_CONC] = "OP_STR_CONC",[OP_STRING_EQ] = "OP_STRING_EQ", [OP_OP] = "OP_OP",[OP_OP_NOFREE] = "OP_OP_NOFREE",[OP_DEFINE_GLOBAL] = "OP_DEFINE_GLOBAL",[OP_DEFINE_GLOBAL_16] = "OP_DEFINE_GLOBAL_16",[OP_LOAD_GLOBAL] = "OP_LOAD_GLOBAL",[OP_LOAD_GLOBAL_16] = "OP_LOAD_GLOBAL_16", [OP_ASSIGN_GLOBAL] = "OP_ASSIGN_GLOBAL",[OP_ASSIGN_GLOBAL_16] = "OP_ASSIGN_GLOBAL_16", [OP_JUMP_IF_FALSE] = "OP_JUMP_IF_FALSE",[OP_JUMP_IF_TRUE] = "OP_JUMP_IF_TRUE",[OP_JUMP] = "OP_JUMP",[OP_JUMP_BACK] = "OP_JUMP_BACK", [OP_JUMP_IF_FALSE_ONSTACK] = "OP_JUMP_IF_FALSE_ONSTACK",[OP_JUMP_IF_TRUE_ONSTACK] = "OP_JUMP_IF_TRUE_ONSTACK", [OP_LOAD_CLOSURE] = "OP_LOAD_CLOSURE",[OP_PUT_CLOSURE] = "OP_PUT_CLOSURE", [OP_LOAD_LINK] = "OP_LOAD_LINK",[OP_PUT_LINK] = "OP_PUT_LINK", [OP_LOAD_8] = "OP_LOAD_8",[OP_PUT_8] = "OP_PUT_8",[OP_PUT_8_WITH_POP] = "OP_PUT_8_WITH_POP", [OP_PUT_8_NOTHING] = "OP_PUT_8_NOTHING", [OP_PUT_8_VOID] = "OP_PUT_8_VOID",[OP_CALL] = "OP_CALL",[OP_RETURN] = "OP_RETURN",[OP_DECLARE_FUNCTION] = "OP_DECLARE_FUNCTION",[OP_DECLARE_FUNCTION_16] = "OP_DECLARE_FUNCTION_16", [OP_COLLECT_LOCALS] = "OP_COLLECT_LOCALS", [OP_DECLARE_CLASS] = "OP_DECLARE_CLASS",[OP_DECLARE_CLASS_16] = "OP_DECLARE_CLASS_16",[OP_DEFINE_CLASSVAR] = "OP_DEFINE_CLASSVAR",[OP_DEFINE_CLASSVAR_16] = "OP_DEFINE_CLASSVAR_16", [OP_GET] = "OP_GET",[OP_SET] = "OP_SET", [OP_GET_16] = "OP_GET_16",[OP_SET_16] = "OP_SET_16", [OP_LOAD_THIS] = "OP_LOAD_THIS", [OP_FOR_LOOP] = "OP_FOR_LOOP",[OP_FOR_LOOP_END] = "OP_FOR_LOOP_END", [__LAST_ENUM_VAL] = "__LAST_ENUM_VAL", };
#endif


struct lninfo {
    uint32_t opstart;
    uint32_t opend;
    int line;
    struct lninfo *next;
};
struct chunk {
    uint32_t opcount;
    uint32_t capacity;
    uint8_t *code;
    
    struct __consts consts;
    struct lninfo *line, *crnt_ln;

};

#define add_const(c, val, s, tt) __add_const(&(c)->consts, (val), (s), (tt))

void chfree(struct chunk *c);
void chput(struct chunk *c, uint8_t opcode);
void chunputif(struct chunk *c, enum opcode o, enum opcode o2);
void chputn(struct chunk *c, void *val, size_t size);
void chputl(struct chunk *c);
struct chunk *challoc(void); 

#endif
